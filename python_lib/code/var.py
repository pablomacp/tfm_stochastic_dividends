# -*- coding: utf-8 -*-
"""
Created on Thu Jul 15 20:09:44 2021

@author: pablo
"""


from montecarlo import *
from funciones import cal_yf_from_mat, days_yf, parametros_to_pasos
from math import exp
import numpy as np
import time

def pricer(S0, q0, r, a, b, vols, volq, rho, M, h_previo, h_elegido, mat_position, t0, T_futdiv, T_opt_sx5e):
    a_pasos = parametros_to_pasos(a, t0, T_futdiv)
    volq_pasos = parametros_to_pasos(volq, t0, T_futdiv)
    vols_pasos = parametros_to_pasos(vols, t0, T_opt_sx5e)

    # Número de pasos N en la simulación
    N = len(h_elegido)
    N_previo = len(h_previo)

    # Cálculos usando normrnd y correlacionando variables después
    S, q = HybridStockDividendsMSamples(S0, q0, r, a_pasos, b, vols_pasos, volq_pasos, rho, M, N, h_elegido, mat_position)

    payoffs_divfut = PayoffDivFut(S[N_previo:N + 1], q[N_previo:N + 1], h_elegido[N_previo:N])
    payoffs_divopt = exp(-r * yf_futdiv[0]) * PayoffOptCall(payoffs_divfut, K_div)
    payoffs_eqopt = exp(-r * yf_futdiv[0]) * PayoffOptCall(S[N], S0)

    return [np.mean(payoffs_divfut), np.mean(payoffs_divopt), np.mean(payoffs_eqopt)]

T_opt_sx5e = ['2020-12-18',
              '2021-12-17',
              '2022-12-16',
              '2023-12-15']
T_futdiv = ['2020-12-18',
            '2021-12-17',
            '2022-12-16',
            '2023-12-15']
T_endyear = ['2020-01-01',
             '2021-01-01',
             '2022-01-01',
             '2023-01-01',
             '2024-01-01']

t0 = '2020-04-01'
days_futdiv = [np.busday_count(t0, fecha) for fecha in T_futdiv]
days_opt_sx5e = [np.busday_count(t0, fecha) for fecha in T_opt_sx5e]

# Year fractions maturities
yf_futdiv = cal_yf_from_mat(t0, T_futdiv, T_endyear)

# Steps for each maturity.
days_yf, h = days_yf(t0, T_futdiv, T_endyear)
mat_position = [len(hs) for hs in h]

h1 = h[0]
h2 = h[1]
h3 = h[2]
h4 = h[3]

div_fut_prices = [53.1, 49.8, 63.6, 67.4]
div_call_opt_prices = [5.60, 4.19, 11.02, 16.13]  # Excel. Tomo el strike 65, que es el más líquido.
eurostoxx_call_opt_prices = [239.0016, 292.9, 312.5604, 336.7692]

objetivos = [[div_fut_prices[i], div_call_opt_prices[i], eurostoxx_call_opt_prices[i]] for i in range(4)]


# Datos del problema
S0 = 2680.3  # También es el strike de las call sobre el eurostoxx
q0 = 0.019967966
M = 2 ** 12
K_div = 65  # Strike dividend call options
rho = -0.189292925
r = -0.00168

# Parametros
b = 0.001  # Criterio experto
a = [0.024632889670984207, 0.03943332940236466, 0.051152059755964985, 0.0559917559120302]
vols = [0.2941956753706126, 0.2115385477314622, 0.2084001707439573, 0.21062649631184904]
volq = [0.17712546432086035, 0.1297972709969229, 0.1263240067709712, 0.1761761314040222]

ist_variation = [0,-0.038250385733252,0.00769447718775544,0.0135488245102889,-0.0418325853822978,0.0170134350425337,0.0313173315261627,0.0923622230984012,-0.0247047282715323,0.038474703351154,0.0286107082680168,-0.0571744714483303,0.0327011839028392,-0.052455124090301,0.0160260565842772,-0.124013959443274,-0.00153263551453256,-0.0165761539943294,-0.0844659923825907,-0.0390982227269754,-0.0166580910728068,0.014409973991465,0.00992563263179014,0.00280523443530395,-0.0365836014722564,-0.0340332282372934,0.00144716179940703,-0.0206881616675529,-0.0401012530325915,-0.00591161868490024,-0.0109179908827014,0.00746505966313394,-0.00434176686295017,0.00320231608161485,-0.00149997140435797,-0.00199510692891038,0.0074728687033435,0.00861018986707731,-0.00139792391187023,-0.00184731652967274,0.00732693814454816,0.0122070155508161,0.0193949094166779,0.00559200859125881,-0.0135120489435838,-0.0121990386365339,0.00460849317867734,0.0112511691645095,-0.0268101906243715,0.0113223704456962,-0.00873788725631933,-0.00510144835740223,-0.0026085606062601,-0.00242367905552668,0.00904047014684149,0.00137438444557646,-0.00156826177255968,-0.00126994877873252,-0.00259663493001756,-0.00167550080613721,0.00618147888966648,0.00354059985369421,0.00179346146056517,-0.00552556468090855,-0.00523826596787967,0.0128406071852929,-0.000885694696769538,-0.00893643235411543,0.00208775457756091,-0.000601060196046237,2.64791238587257E-05,0.00999954535364797,4.54667023268448E-05,-0.00167677717019828,-0.00727852966279139,0.0111683779720026,0.00666963454611687,0.00512549322702683,0.00426768488308113,-0.00010892712230872,-0.00545995222541811,0.0121185374424705,-0.00324861612778069,0.0135779938465629,-0.00432078000143385,-0.0207690936877292,-0.000242949077873302,-0.00225433292484207,0.00197001794605382,-0.000574483234799026,0.00552162546239536,0.00208171407140886,-0.00114553134195475,-0.00343021620100846,-0.00225645897887137,-0.00180245230506439,0.00618085507250311,-0.00288957967292879,-0.00342115187759275,0.004160332393787,-0.00076493722379142,-0.00189657591159737,0.00486344930789377,0.00332379532819073,0.00308577134734434,0.0114439777688245,0.00536287492266416,-0.00438638893569303,-0.00049695065556079,-0.000992914452145636,0.000278645287308181,0.000914018727719053,0.00401453884094054,0.00057423116826907,0.00131663740805766,0.00577469471225707,-0.00256644615478932,-0.00295339306800031,0.000166729190112934,0.0119198258844966,-0.00382641627823589,0.0217403748182578,0.0091995921562284,0.00854997145154334,-0.011085375831115,0.00711693179872973,0.00858554970635317,0.00118946125608279,-0.029827328927734,-0.0143439465463866,0.00664715105982146,0.00387862453215869,0.00545113477539322,-0.00538497473138828,-0.00139102112825374,-0.00963770408720416,0.00527493561144492,0.00697554449496041,0.00192544714108011,0.000798647131549518,-0.00891803352572182,0.00317898984418711,0.0062670253240143,0.00509575620393324,0.00113590194047525,-4.86382714530749E-05,0.00301030217809287,0.00981503000727358,0.00879634231189747,-0.00343768754333531,0.00168672448610342,0.00452316252019016,0.0136537330108338,-0.00151017513877877,0.00645895295087244,0.00437579665591967,-0.0116846045997386,-0.00625057071068571,0.013330428060163,-0.0056274653551744,0.012048373724873,0.01410389974351,-0.00180010338431588,-0.0203922362949636,0.00920172551141563,-0.00215673687810075,-0.0123363887917806,0.0197553466928904,0.00556861887315213,-0.00582011700640001,-0.0193091477791074,-0.0326386879195882,0.00668618486522356,0.00115511789422008,-0.0172353118135533,-0.000252520237085256,0.00407959773798832,-0.00643946899148009,8.49167956935865E-06,0.0123068723638364,0.00279870581406716,-0.000760875494928001,-0.00535472558102342,-0.00561714792012183,0.00546510499054895,0.00131231719764517,0.000257383326708122,-0.00136797733555712,-0.00234489636013962,-0.00397586668785622,-0.00119615190562299,-0.00456244797765334,0.000994173353329769,0.00930735066904603,0.00297061691050119,0.00688029156315045,0.00909545140280851,-0.00016555570077977,-0.000409364874751858,-0.00324403788665836,-0.00327379922236449,-0.000334479020091767,0.00387298462963502,0.00052419856989361,0.0205958246753822,0.00118963420227924,-0.00333579118124169,0.00114272890749798,-0.00425450589515151,0.00432606416749106,0.00238871885341486,0.0119727654781768,-0.000461084746777636,0.00193790891828085,0.0100811461054111,0.00603274570711765,-0.0113677802389887,0.00616772949320917,-0.0152439934783778,-0.00451243148119518,0.00398125764765576,0.00706299591247896,-0.0175745263854112,6.20107426228128E-05,0.00496471579747046,-0.0163064420079167,-0.00375738681308457,0.0155887269698562,0.00636075591936704,0.0131294454917218,-0.0119813748679728,0.00308591313482818,-0.0194746668383442,0.00473367909771971,-0.017843168396887,-0.0112862885726686,0.0038837121982958,-0.00730946731083305,0,0.00362085015734131,0.000437091654977617,0.00243132717817126,-0.00305770235508747,-0.000348188421307933,0.00132029046390203,0.00618219355729168,0.00414914995842185,0.00373863195052257,0.000762798629862873,0.00363573911170358,0.00312148686727112,0.00217428201871705,-0.00606155797164684]
index_sim = [S0*(1+change) for change in hist_variation]

tiempo0 = time.time()

V_divfut = []
V_divcall = []
V_eurostoxxcall = []

for S in index_sim:
    auxi = pricer(S, q0, r, a, b, vols, volq, rho, M, h3, h4, mat_position, t0, T_futdiv, T_opt_sx5e)
    V_divfut.append(auxi[0] - div_fut_prices[3])
    V_divcall.append(auxi[1] - div_call_opt_prices[3])
    V_eurostoxxcall.append(auxi[2] - eurostoxx_call_opt_prices[3])
    
var_divfut = np.percentile(V_divfut, 5)
var_divcall = np.percentile(V_divcall, 5)
var_eurostoxxcall = np.percentile(V_eurostoxxcall, 5)

ES_divfut = np.average([valor for valor in V_divfut if valor<=var_divfut])
ES_divcall = np.average([valor for valor in V_divcall if valor<=var_divcall])
ES_eurostooxxcall = np.average([valor for valor in V_eurostoxxcall if valor<=var_eurostoxxcall])

tiempo1 = time.time()
print("Tiempo VaR:", tiempo1 - tiempo0)

delta_equity = [67.39999999864352, 43.80173654962185, 336.769200000964] # Obtenida del otro archivo
V_divfut_taylor = [delta_equity[0]*variacion for variacion in hist_variation]
V_divcall_taylor = [delta_equity[1]*variacion for variacion in hist_variation]
V_eurostoxxcall_taylor = [delta_equity[2]*variacion for variacion in hist_variation]

var_divfut_taylor = np.percentile(V_divfut_taylor, 5)
var_divcall_taylor = np.percentile(V_divcall_taylor, 5)
var_eurostoxxcall_taylor = np.percentile(V_eurostoxxcall_taylor, 5)

ES_divfut_taylor = np.average([valor for valor in V_divfut_taylor if valor<=var_divfut_taylor])
ES_divcall_taylor = np.average([valor for valor in V_divcall_taylor if valor<=var_divcall_taylor])
ES_eurostooxxcall_taylor = np.average([valor for valor in V_eurostoxxcall_taylor if valor<=var_eurostoxxcall_taylor])

tiempo2 = time.time()
print("Tiempo VaR:", tiempo2 - tiempo1)